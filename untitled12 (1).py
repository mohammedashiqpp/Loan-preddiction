# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h_0u5cDTWO8ujO4CUo7WscaUh6uYV4HF
"""

import pandas as pd

import numpy as np

test=pd.read_csv('test_lAUu6dG (1).csv')

train=pd.read_csv('train_ctrUa4K (1).csv')

test.head(5)

test.isna().sum()

cols_to_be_removed = ["Loan_ID", "Gender"]

train.drop(cols_to_be_removed, axis=1, inplace=True)
test.drop(cols_to_be_removed, axis=1, inplace=True)

train

print(train.isna().sum())

train["Self_Employed"].fillna(train["Self_Employed"].mode()[0],inplace=True)
train["Dependents"].fillna(train["Dependents"].mode()[0],inplace=True)
train["Married"].fillna(train["Married"].mode()[0],inplace=True)
train["LoanAmount"].fillna(train["LoanAmount"].mode()[0],inplace=True)
train["Loan_Amount_Term"].fillna(train["Loan_Amount_Term"].mode()[0],inplace=True)
train["Credit_History"].fillna(train["Credit_History"].mode()[0],inplace=True)

train.head(5)

print(train.isna().sum())

test["Self_Employed"].fillna(test["Self_Employed"].mode()[0],inplace=True)
test["Dependents"].fillna(test["Dependents"].mode()[0],inplace=True)
test["Married"].fillna(test["Married"].mode()[0],inplace=True)
test["LoanAmount"].fillna(test["LoanAmount"].mode()[0],inplace=True)
test["Loan_Amount_Term"].fillna(test["Loan_Amount_Term"].mode()[0],inplace=True)
test["Credit_History"].fillna(test["Credit_History"].mode()[0],inplace=True)

test.isna().sum()

from sklearn.preprocessing import LabelEncoder
from sklearn import preprocessing

test.dtypes

cnvtoint=['Married','Dependents','Education','Self_Employed','Property_Area','Loan_Status']

for i in cnvtoint:
  le = preprocessing.LabelEncoder()
  train[i]=le.fit_transform(train[i].astype('str'))

cnvtoint=['Married','Dependents','Education','Self_Employed','Property_Area']

for i in cnvtoint:
  le = preprocessing.LabelEncoder()
  test[i]=le.fit_transform(test[i].astype('str'))

train.dtypes

from sklearn.linear_model import LogisticRegression

model=LogisticRegression()

xtrain=train.drop('Loan_Status',axis=1)

ytrain=train.Loan_Status

model.fit(xtrain,ytrain)

predicted=model.predict(test)



from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(xtrain,ytrain, test_size=0.35, random_state=42)

model.fit(X_train,y_train)

model.score(X_test,y_test)

predictd=model.predict(test)



pd.DataFrame(predictd, columns=['Loan_Status']).to_csv('prediction.csv')

